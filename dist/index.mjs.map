{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  AppConfigurationClient,\n  featureFlagPrefix,\n  isFeatureFlag,\n  parseFeatureFlag,\n} from \"@azure/app-configuration\";\nimport { inject, ref, type App, type InjectionKey, type Ref } from \"vue\";\n\ntype TypeGetFeatureFlag = (name: string, label?: string) => Promise<boolean>;\ntype TypeGetFeatureFlagRef = (name: string, label?: string) => Ref<boolean>;\n\ninterface IFeatureFlagsManager {\n  getFeatureFlag: TypeGetFeatureFlag;\n  getFeatureFlagRef: TypeGetFeatureFlagRef;\n}\n\nconst FeatureFlagsManagerKey: InjectionKey<{\n  getFeatureFlag: TypeGetFeatureFlag;\n  getFeatureFlagRef: TypeGetFeatureFlagRef;\n}> = Symbol(\"FeatureFlagsManager\");\n\nconst featureFlagsManager = (\n  connectionString?: string\n): IFeatureFlagsManager => {\n  let client: AppConfigurationClient | null = null;\n\n  if (connectionString) {\n    client = new AppConfigurationClient(connectionString);\n  }\n\n  const getFeatureFlag = async (\n    name: string,\n    label?: string\n  ): Promise<boolean> => {\n    if (!client) return false;\n    try {\n      const response = await client.getConfigurationSetting({\n        key: `${featureFlagPrefix}${name}`,\n        label,\n      });\n      if (!isFeatureFlag(response)) return false;\n      return parseFeatureFlag(response).value.enabled;\n    } catch (error) {\n      console.error(\n        \"[App Configuration Plugin] Error retrieving feature flag.\",\n        error\n      );\n      return false;\n    }\n  };\n\n  const getFeatureFlagRef = (name: string, label?: string): Ref<boolean> => {\n    const isEnabled = ref(false);\n\n    if (!client) return isEnabled;\n    try {\n      client\n        .getConfigurationSetting({\n          key: `${featureFlagPrefix}${name}`,\n          label,\n        })\n        .then((response) => {\n          if (!isFeatureFlag(response)) return isEnabled;\n          isEnabled.value = parseFeatureFlag(response).value.enabled;\n          return isEnabled;\n        });\n    } catch (error) {\n      console.error(\n        \"[App Configuration Plugin] Error retrieving feature flag.\",\n        error\n      );\n    }\n    return isEnabled;\n  };\n\n  return { getFeatureFlag, getFeatureFlagRef };\n};\n\nfunction AppConfigurationPlugin(app: App, connectionString?: string) {\n  const manager = featureFlagsManager(connectionString);\n  app.provide(FeatureFlagsManagerKey, manager);\n  app.config.globalProperties.$featureFlags = manager;\n}\n\nexport const useFeatureFlags = () => {\n  const featureFlagsManager = inject(\n    FeatureFlagsManagerKey\n  ) as IFeatureFlagsManager;\n  if (!featureFlagsManager) {\n    throw new Error(\n      \"[App Configuration Plugin] FeatureFlagsManager is not provided.\"\n    );\n  }\n  return featureFlagsManager;\n};\n\nexport { AppConfigurationPlugin, FeatureFlagsManagerKey };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,QAAQ,WAAkD;AAUnE,IAAM,yBAGD,OAAO,qBAAqB;AAEjC,IAAM,sBAAsB,CAC1B,qBACyB;AACzB,MAAI,SAAwC;AAE5C,MAAI,kBAAkB;AACpB,aAAS,IAAI,uBAAuB,gBAAgB;AAAA,EACtD;AAEA,QAAM,iBAAiB,CACrB,MACA,UACqB;AACrB,QAAI,CAAC;AAAQ,aAAO;AACpB,QAAI;AACF,YAAM,WAAW,MAAM,OAAO,wBAAwB;AAAA,QACpD,KAAK,GAAG,iBAAiB,GAAG,IAAI;AAAA,QAChC;AAAA,MACF,CAAC;AACD,UAAI,CAAC,cAAc,QAAQ;AAAG,eAAO;AACrC,aAAO,iBAAiB,QAAQ,EAAE,MAAM;AAAA,IAC1C,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,oBAAoB,CAAC,MAAc,UAAiC;AACxE,UAAM,YAAY,IAAI,KAAK;AAE3B,QAAI,CAAC;AAAQ,aAAO;AACpB,QAAI;AACF,aACG,wBAAwB;AAAA,QACvB,KAAK,GAAG,iBAAiB,GAAG,IAAI;AAAA,QAChC;AAAA,MACF,CAAC,EACA,KAAK,CAAC,aAAa;AAClB,YAAI,CAAC,cAAc,QAAQ;AAAG,iBAAO;AACrC,kBAAU,QAAQ,iBAAiB,QAAQ,EAAE,MAAM;AACnD,eAAO;AAAA,MACT,CAAC;AAAA,IACL,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAEA,SAAO,EAAE,gBAAgB,kBAAkB;AAC7C;AAEA,SAAS,uBAAuB,KAAU,kBAA2B;AACnE,QAAM,UAAU,oBAAoB,gBAAgB;AACpD,MAAI,QAAQ,wBAAwB,OAAO;AAC3C,MAAI,OAAO,iBAAiB,gBAAgB;AAC9C;AAEO,IAAM,kBAAkB,MAAM;AACnC,QAAMA,uBAAsB;AAAA,IAC1B;AAAA,EACF;AACA,MAAI,CAACA,sBAAqB;AACxB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAOA;AACT;","names":["featureFlagsManager"]}