{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  AppConfigurationClient,\n  featureFlagPrefix,\n  isFeatureFlag,\n  parseFeatureFlag,\n} from \"@azure/app-configuration\";\nimport { inject, ref, type App, type InjectionKey, type Ref } from \"vue\";\n\ntype TypeAppConfigurationClient = AppConfigurationClient | null;\n\ntype TypeGetFeatureFlag = (\n  name: string,\n  label?: string\n) => {\n  isFeatureEnabled: Ref<boolean>;\n  featureDescription: Ref<string>;\n};\n\ntype TypeGetFeatureFlagAsync = (\n  name: string,\n  label?: string\n) => Promise<{\n  isFeatureEnabled: boolean;\n  featureDescription: string;\n}>;\n\ninterface IFeatureFlagsManager {\n  appConfigurationClient: TypeAppConfigurationClient;\n  getFeatureFlag: TypeGetFeatureFlag;\n  getFeatureFlagAsync: TypeGetFeatureFlagAsync;\n}\n\nconst FeatureFlagsManagerKey: InjectionKey<IFeatureFlagsManager> = Symbol(\n  \"FeatureFlagsManager\"\n);\n\nconst featureFlagsManager = (\n  connectionString?: string\n): IFeatureFlagsManager => {\n  let appConfigurationClient: TypeAppConfigurationClient = null;\n\n  if (connectionString) {\n    appConfigurationClient = new AppConfigurationClient(connectionString);\n  }\n\n  const getFeatureFlag: TypeGetFeatureFlag = (name, label) => {\n    const isFeatureEnabled = ref(false);\n    const featureDescription = ref(\"\");\n\n    if (!appConfigurationClient) {\n      return { isFeatureEnabled, featureDescription };\n    }\n    try {\n      appConfigurationClient\n        .getConfigurationSetting({\n          key: `${featureFlagPrefix}${name}`,\n          label,\n        })\n        .then((response) => {\n          if (!isFeatureFlag(response)) {\n            return { isFeatureEnabled, featureDescription };\n          }\n\n          const {\n            value: { enabled, description = \"\" },\n          } = parseFeatureFlag(response);\n\n          isFeatureEnabled.value = enabled;\n          featureDescription.value = description;\n\n          return { isFeatureEnabled, featureDescription };\n        });\n    } catch (error) {\n      console.error(\n        \"[App Configuration Plugin] Error retrieving feature flag.\",\n        error\n      );\n    }\n    return { isFeatureEnabled, featureDescription };\n  };\n\n  const getFeatureFlagAsync: TypeGetFeatureFlagAsync = async (name, label) => {\n    let isFeatureEnabled = false;\n    let featureDescription = \"\";\n\n    if (!appConfigurationClient) {\n      return { isFeatureEnabled, featureDescription };\n    }\n    try {\n      const response = await appConfigurationClient.getConfigurationSetting({\n        key: `${featureFlagPrefix}${name}`,\n        label,\n      });\n      if (!isFeatureFlag(response)) {\n        return { isFeatureEnabled, featureDescription };\n      }\n      const {\n        value: { enabled, description = \"\" },\n      } = parseFeatureFlag(response);\n\n      isFeatureEnabled = enabled;\n      featureDescription = description;\n\n      return { isFeatureEnabled, featureDescription };\n    } catch (error) {\n      console.error(\n        \"[App Configuration Plugin] Error retrieving feature flag.\",\n        error\n      );\n      return { isFeatureEnabled, featureDescription };\n    }\n  };\n\n  return { appConfigurationClient, getFeatureFlag, getFeatureFlagAsync };\n};\n\nfunction AppConfigurationPlugin(app: App, connectionString?: string) {\n  const manager = featureFlagsManager(connectionString);\n  app.provide(FeatureFlagsManagerKey, manager);\n  app.config.globalProperties.featureFlagsManager = manager;\n}\n\nconst useFeatureFlags = () => {\n  const featureFlagsManager = inject(\n    FeatureFlagsManagerKey\n  ) as IFeatureFlagsManager;\n  if (!featureFlagsManager) {\n    throw new Error(\n      \"[App Configuration Plugin] FeatureFlagsManager is not provided.\"\n    );\n  }\n  return featureFlagsManager;\n};\n\nexport { AppConfigurationPlugin, useFeatureFlags };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAKO;AACP,iBAAmE;AA0BnE,IAAM,yBAA6D;AAAA,EACjE;AACF;AAEA,IAAM,sBAAsB,CAC1B,qBACyB;AACzB,MAAI,yBAAqD;AAEzD,MAAI,kBAAkB;AACpB,6BAAyB,IAAI,gDAAuB,gBAAgB;AAAA,EACtE;AAEA,QAAM,iBAAqC,CAAC,MAAM,UAAU;AAC1D,UAAM,uBAAmB,gBAAI,KAAK;AAClC,UAAM,yBAAqB,gBAAI,EAAE;AAEjC,QAAI,CAAC,wBAAwB;AAC3B,aAAO,EAAE,kBAAkB,mBAAmB;AAAA,IAChD;AACA,QAAI;AACF,6BACG,wBAAwB;AAAA,QACvB,KAAK,GAAG,0CAAiB,GAAG,IAAI;AAAA,QAChC;AAAA,MACF,CAAC,EACA,KAAK,CAAC,aAAa;AAClB,YAAI,KAAC,wCAAc,QAAQ,GAAG;AAC5B,iBAAO,EAAE,kBAAkB,mBAAmB;AAAA,QAChD;AAEA,cAAM;AAAA,UACJ,OAAO,EAAE,SAAS,cAAc,GAAG;AAAA,QACrC,QAAI,2CAAiB,QAAQ;AAE7B,yBAAiB,QAAQ;AACzB,2BAAmB,QAAQ;AAE3B,eAAO,EAAE,kBAAkB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACL,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,WAAO,EAAE,kBAAkB,mBAAmB;AAAA,EAChD;AAEA,QAAM,sBAA+C,CAAO,MAAM,UAAU;AAC1E,QAAI,mBAAmB;AACvB,QAAI,qBAAqB;AAEzB,QAAI,CAAC,wBAAwB;AAC3B,aAAO,EAAE,kBAAkB,mBAAmB;AAAA,IAChD;AACA,QAAI;AACF,YAAM,WAAW,MAAM,uBAAuB,wBAAwB;AAAA,QACpE,KAAK,GAAG,0CAAiB,GAAG,IAAI;AAAA,QAChC;AAAA,MACF,CAAC;AACD,UAAI,KAAC,wCAAc,QAAQ,GAAG;AAC5B,eAAO,EAAE,kBAAkB,mBAAmB;AAAA,MAChD;AACA,YAAM;AAAA,QACJ,OAAO,EAAE,SAAS,cAAc,GAAG;AAAA,MACrC,QAAI,2CAAiB,QAAQ;AAE7B,yBAAmB;AACnB,2BAAqB;AAErB,aAAO,EAAE,kBAAkB,mBAAmB;AAAA,IAChD,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AACA,aAAO,EAAE,kBAAkB,mBAAmB;AAAA,IAChD;AAAA,EACF;AAEA,SAAO,EAAE,wBAAwB,gBAAgB,oBAAoB;AACvE;AAEA,SAAS,uBAAuB,KAAU,kBAA2B;AACnE,QAAM,UAAU,oBAAoB,gBAAgB;AACpD,MAAI,QAAQ,wBAAwB,OAAO;AAC3C,MAAI,OAAO,iBAAiB,sBAAsB;AACpD;AAEA,IAAM,kBAAkB,MAAM;AAC5B,QAAMA,2BAAsB;AAAA,IAC1B;AAAA,EACF;AACA,MAAI,CAACA,sBAAqB;AACxB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAOA;AACT;","names":["featureFlagsManager"]}